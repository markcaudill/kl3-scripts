#!/bin/sh
# Block entire services using ipset(8) for high performant matching

# List of services to block
as_list='
20940	# Akamai
32787	# Akamai (other)
714	# Apple
19679	# Dropbox
32934	# Facebook
15169	# Google
8075	# Microsoft
'
# Note the escaped &
api_url='https://stat.ripe.net/data/announced-prefixes/data.json?min_peers_seeing=0\&resource='

name=$(basename "${0}")

# Securely write parsed JSON data to temporary file
umask 0177
tmpfile=/tmp/"${name}"-$(od -N4 -tx /dev/random | tr -d 0[:space:])
trap "rm -f \"${tmpfile}\"" 0 1 2 3 15

curl -s $(printf '%s' "${as_list}" \
		| tr -d -c '[:digit:]\n' \
		| sed "/^$/d; s,^,${api_url},g"
	) \
	| sed -n 's,^ *"prefix": "\(.*\)"$,\1,p' \
	> "${tmpfile}"

# Do not keep potentially outdated networks
sudo ipset -quiet flush "${name}"
sudo ipset -quiet flush "${name}"6

# Create hash tables using only as many entries as needed
sudo ipset -exist create "${name}" \
	hash:net family inet hashsize 1024 \
	maxelem $(grep -cF . "${tmpfile}")
sudo ipset -exist create "${name}"6 \
	hash:net family inet6 hashsize 1024 \
	maxelem $(grep -cF : "${tmpfile}")

# Add rules on top to be processed first
sudo iptables --table filter --insert OUTPUT 1 \
	--match set --match-set "${name}" \
	dst --jump REJECT
sudo ip6tables --table filter --insert OUTPUT 1 \
	--match set --match-set "${name}"6 \
	dst --jump REJECT

# Fill hash tables with networks
while read net; do
	sudo ipset add "${name}" "${net}"
done << EOF
$(grep -F . "${tmpfile}")
EOF

while read net6; do
	sudo ipset add "${name}"6 "${net6}"
done << EOF
$(grep -F : "${tmpfile}")
EOF
