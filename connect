#!/bin/sh
# Connect to remote ${host} through ssh(1) or mosh(1) depending on the
# current network connectivity and execute given command.
# Hosts defined in ssh_config(5) are used, thus only the ${host} and
# optional ${mosh_ports} must be provided through the environment.
#
# Usage:	$ env HOST=foo MOSH_PORTS=61000:62000 connect \
#			tmux a -t <session-name>
# Example ssh_config(5) for ${host}-tor, see nc(1) for more information
#
# Host foo-tor
#	Hostname	0xdeadbeef123456.onion
#	ProxyCommand	nc -6 -nX5 -x[::1]:9050 %h %p

host="${HOST:?hostname must not be empty}"
mosh_ports="${MOSH_PORTS:-60000:61000}"
remote_cmd="${@:?remote command must not be empty}"
ssh_opts='-oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null'

_ip() {
	printf 'GET /ip HTTP/1.0\r\n\r\n' |
		ssh -T -oConnectTimeout=5 -- \
		    "${host}"-tor nc -cw5 ifcfg.me 443 |
		tail -n1
}

_mosh() {
	set -x
	mosh ${1} --ssh="ssh -oConnectTimeout=5 ${ssh_opts}" -- \
	     "${2:-${host}}" ${remote_cmd}
}

_ssh() {
	set -x
	ssh -t -oConnectTimeout=5 ${ssh_opts} ${1} -- \
	    "${2:-${host}}" ${remote_cmd}
}

printf 'LAN: ...' 1>&2
{
ping6 -c2 -qnw1 "${host}" ||
ping  -c2 -qnw1 "${host}"
} 2>/dev/null 1>&2

[ ${?} -eq 0 ] &&
	_mosh ||
	printf failed\\n 1>&2

printf 'WAN: IP: ...' 1>&2
ip="$(_ip)"
printf '\b\b\b%s\n' "${ip:?Could not get public IP}"

_mosh "-p ${mosh_ports}" "${USER}"@"${ip}" ||
	printf failed\\n 1>&2

_ssh ||
	printf failed\\n 1>&2

_ssh '-q -oStrictHostKeyChecking=no' "${host}"-tor ||
	printf failed\\n 1>&2
