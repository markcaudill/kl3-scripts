#!/bin/sh
# Connect to remote host through ssh(1) or mosh(1) depending on the
# current network connectivity execute given command.
# Wrapper to connect to remote hosts defined in ssh_config(5)
# transparently through ssh(1) or mosh(1) depending on network
# connectivity. IPv6 is always preferred over IPv4, Tor hidden services
# can be used as last resort.
#
# Example ssh_config(5) for host foo over Tor:
#
#	Host foo-tor
#		Hostname	0xdeadbeef123456.onion
#		ProxyCommand	nc -6nX5 -x[::1]:9050 %h %p

err() {
	cat <<- EOF 1>&2
		${1:-}
		usage: ${0##*/} <host> [-p <mosh_port>[:<mosh_port2>]]
		       [cmd [args...]]
		EOF
	exit 1
}

[ -n "${host:=${1}}" ] ||
	err 'hostname missing'
shift 1
case "${1}" in
-p)
	case "${2}" in
	[0-9]*|[0-9]*:[0-9]*)
		mosh_ports="-p ${2}"
		;;
	*)
		err 'invalid mosh port'
	esac
	shift 2
	;;
esac
remote_cmd="${@:-}"
ssh_opts='-oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null'

ip() {
	printf 'GET /ip HTTP/1.0\r\n\r\n' |
		command ssh -oConnectTimeout=5 \
		    -- "${host}"-tor nc ${1} -cw5 ifcfg.me 443 |
		tail -n1
}

mosh() {
	set -x
	command mosh --family=prefer-inet6 ${mosh_ports:-} \
		--ssh="ssh -oConnectTimeout=5 ${NO_CHECK:+${ssh_opts}}" \
		-- "${1:-${host}}" ${remote_cmd:-}
}

ssh() {
	set -x
	command ssh -t -oConnectTimeout=5 ${NO_CHECK:+${ssh_opts}} \
		-- "${1:-${host}}" ${remote_cmd:-}
}

printf 'LAN...\n'

if [ ${?} -eq 0 ]; then
	mosh ||
	ssh ||
	printf 'LAN failed\n'
fi

printf 'WAN...\n'
NO_CHECK=1

for f in 6 4; do
	ip="$(ip -${f})"
	printf '  IPv%d: %s\n' ${f} "${ip:-failed}"
	mosh "${ip}" ||
	ssh "${ip}" ||
		printf '  IPv%d failed\n' ${f}
done

exec command ssh -t "${host}"-tor ||
	printf 'Tor failed\n'
