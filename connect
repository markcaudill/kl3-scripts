#!/bin/sh
# Connect to remote ${host} through ssh(1) or mosh(1) depending on the
# current network connectivity and execute given command.
# Hosts defined in ssh_config(5) are used, thus only the ${host} and
# optional ${mosh_ports} must be provided through the environment.
# IPv6 is always preferred over IPv4 unless ssh_config(5) overwrites
# this behaviour.
#
# Usage:	$ env HOST=foo MOSH_PORTS=61000:62000 connect \
#			tmux a -t <session-name>
# Example ssh_config(5) for ${host}-tor, see nc(1) for more information
#
# Host foo-tor
#	Hostname	0xdeadbeef123456.onion
#	ProxyCommand	nc -6nX5 -x[::1]:9050 %h %p

host="${HOST:?hostname must not be empty}"
mosh_ports="${MOSH_PORTS:-60000:61000}"
remote_cmd="${@:?remote command must not be empty}"
ssh_opts='-oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null'

ip() {
	printf 'GET /ip HTTP/1.0\r\n\r\n' |
		command ssh -oConnectTimeout=5 \
		    -- "${host}"-tor nc ${1} -cw5 ifcfg.me 443 |
		tail -n1
}

mosh() {
	set -x
	command mosh --family=prefer-inet6 ${1:-} \
		--ssh="ssh -oConnectTimeout=5 ${NO_CHECK:+${ssh_opts}}" \
		-- "${2:-${host}}" ${remote_cmd}
}

ssh() {
	s	x
	command ssh -t -oConnectTimeout=5 ${NO_CHECK:+${ssh_opts}} ${1} \
		-- "${2:-${host}}" ${remote_cmd}
}

printf 'LAN...\n'

if [ ${?} -eq 0 ]; then
	mosh ||
	ssh ||
	printf 'LAN failed\n'
fi

printf 'WAN...\n'
NO_CHECK=1

for f in 6 4; do
	ip="$(ip -${f})"
	printf '  IPv%d: %s\n' ${f} "${ip:-failed}"
	mosh "-p ${mosh_ports}" "${ip}" ||
	ssh "${USER}"@"{ip}" ||
		printf '  IPv%d failed\n' ${f}
done

exec command ssh "${host}"-tor ||
	printf 'Tor failed\n'